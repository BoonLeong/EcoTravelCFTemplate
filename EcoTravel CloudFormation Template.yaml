AWSTemplateFormatVersion: '2010-09-09'

Resources:

    # Production VPC
    ProdVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: ProdVPC

    # Production VPC IGW
    ProdVPCIGW:
        Type: AWS::EC2::InternetGateway

    AttachIGW:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref ProdVPC
            InternetGatewayId: !Ref ProdVPCIGW
    
    # Production VPC Subnetting
    ProdPublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ProdVPC
            CidrBlock: 10.0.1.0/24
            AvailabilityZone: us-east-1a
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: ProdPublicSubnet1

    ProdPublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ProdVPC
            CidrBlock: 10.0.2.0/24
            AvailabilityZone: us-east-1b
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: ProdPublicSubnet2

    ProdPrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ProdVPC
            CidrBlock: 10.0.3.0/24
            AvailabilityZone: us-east-1a
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: ProdPrivateSubnet1
    
    ProdPrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref ProdVPC
            CidrBlock: 10.0.4.0/24
            AvailabilityZone: us-east-1b
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: ProdPrivateSubnet2

    # Production VPC Routing
    ProdPublicRT:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref ProdVPC
            Tags:
                - Key: Name
                  Value: ProdPublicRT

    ProdPublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref ProdPublicRT
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref ProdVPCIGW
    
    ProdPublicSubnet1RTAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref ProdPublicSubnet1
            RouteTableId: !Ref ProdPublicRT

    ProdPublicSubnet2RTAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref ProdPublicSubnet2
            RouteTableId: !Ref ProdPublicRT

    # Production VPC Public Subnet ACL
    ProdPublicSubnetACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref ProdVPC
            Tags:
                - Key: Name
                  Value: ProdPublicSubnetACL

    ProdPublicSubnet1AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ProdPublicSubnet1
            NetworkAclId: !Ref ProdPublicSubnetACL

    ProdPublicSubnet2AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ProdPublicSubnet2
            NetworkAclId: !Ref ProdPublicSubnetACL
    
    ProdPublicSubnetInboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 80
                To: 80

    ProdPublicSubnetInboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443

    ProdPublicSubnetInboundSSH:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0  # Replace with office IP
            PortRange:
                From: 22
                To: 22

    ProdPublicSubnetInboundMySQLFromPrivateSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 130
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.3.0/24
            PortRange:
                From: 3306
                To: 3306
    
    ProdPublicSubnetInboundMySQLFromPrivateSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 140
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.4.0/24
            PortRange:
                From: 3306
                To: 3306
    
    ProdPublicSubnetOutboundHTTP:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 150
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 80
                To: 80
    
    ProdPublicSubnetOutboundHTTPS:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 160
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443

    ProdPublicSubnetOutboundSSH:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 170
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0 # Replace with office IP
            PortRange:
                From: 22
                To: 22

    ProdPublicSubnetOutboundMySQLToPrivateSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 180
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.3.0/24
            PortRange:
                From: 3306
                To: 3306

    ProdPublicSubnetOutboundMySQLToPrivateSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPublicSubnetACL
            RuleNumber: 190
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.4.0/24
            PortRange:
                From: 3306
                To: 3306

    # Production VPC Private Subnet ACL
    ProdPrivateSubnetACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref ProdVPC
            Tags:
                - Key: Name
                  Value: ProdPrivateSubnetACL

    ProdPrivateSubnet1AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ProdPrivateSubnet1
            NetworkAclId: !Ref ProdPrivateSubnetACL

    ProdPrivateSubnet2AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref ProdPrivateSubnet2
            NetworkAclId: !Ref ProdPrivateSubnetACL

    ProdPrivateSubnetInboundMySQLFromPublicSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.1.0/24
            PortRange:
                From: 3306
                To: 3306

    ProdPrivateSubnetInboundMySQLFromPublicSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 110
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.2.0/24
            PortRange:
                From: 3306
                To: 3306
    
    ProdPrivateSubnetInboundMySQLFromPrivateSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 120
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.3.0/24
            PortRange:
                From: 3306
                To: 3306
    
    ProdPrivateSubnetInboundMySQLFromPrivateSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 130
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: 10.0.4.0/24
            PortRange:
                From: 3306
                To: 3306
    
    ProdPrivateSubnetOutboundMySQLToPublicSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 140
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.1.0/24
            PortRange:
                From: 3306
                To: 3306

    ProdPrivateSubnetOutboundMySQLToPublicSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 150
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.2.0/24
            PortRange:
                From: 3306
                To: 3306

    ProdPrivateSubnetOutboundMySQLToPrivateSubnet1:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 160
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.3.0/24
            PortRange:
                From: 3306
                To: 3306

    ProdPrivateSubnetOutboundMySQLToPrivateSubnet2:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref ProdPrivateSubnetACL
            RuleNumber: 170
            Protocol: 6
            RuleAction: allow
            Egress: true
            CidrBlock: 10.0.4.0/24
            PortRange:
                From: 3306
                To: 3306

    # Production VPC Security Groups
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Restrict inbound traffic
            VpcId: !Ref ProdVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: -1
                  FromPort: 0
                  ToPort: 0
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: ALBSecurityGroup

    BastionHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Restrict inbound traffic
            VpcId: !Ref ProdVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0  # Replace with authorized IP range
            SecurityGroupEgress:
                - IpProtocol: -1
                  FromPort: 0
                  ToPort: 0
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: BastionHostSecurityGroup

    WebAppSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Restrict inbound traffic
            VpcId: !Ref ProdVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId: !Ref ALBSecurityGroup
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  SourceSecurityGroupId: !Ref ALBSecurityGroup
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  SourceSecurityGroupId: !Ref BastionHostSecurityGroup
            SecurityGroupEgress:
                - IpProtocol: -1
                  FromPort: 0
                  ToPort: 0
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: WebAppSecurityGroup

    DatabaseSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Restrict inbound traffic
            VpcId: !Ref ProdVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 3306
                  ToPort: 3306
                  SourceSecurityGroupId: !Ref BastionHostSecurityGroup
            SecurityGroupEgress:
                - IpProtocol: -1
                  FromPort: 0
                  ToPort: 0
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: DatabaseSecurityGroup

    WebAppSecurityGroupIngressMySQLFromDatabase:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref WebAppSecurityGroup
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref DatabaseSecurityGroup

    BastionHostSecurityGroupIngressMySQLFromDatabase:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref BastionHostSecurityGroup
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref DatabaseSecurityGroup

    DatabaseSecurityGroupIngressMySQLFromDatabase:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref DatabaseSecurityGroup
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref DatabaseSecurityGroup